apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.0"

    defaultConfig {
        applicationId "com.hangulo.gradle.builditbigger"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true // http://stackoverflow.com/questions/28640314/android-studio-fails-to-debug-with-error-org-gradle-process-internal-execexcepti
        // https://developer.android.com/tools/building/multidex.html#mdex-gradle
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        free {
            applicationId "com.hangulo.gradle.builditbigger.free"
            versionName "1.0-free"
        }
        paid {
            applicationId "com.hangulo.gradle.builditbigger.paid"
            versionName "1.0-paid"
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:23.0.0'
    freeCompile 'com.google.android.gms:play-services:7.8.0' // Added for AdMob  --> only for free version
    compile project(":jokedisplay")
    compile project(path: ':backend', configuration: 'android-endpoints')

}

//Start up the GCE dev server & run all Android tests & shut down dev server
// http://stackoverflow.com/questions/31434928/android-gradle-task-google-appengine

/*
        Optional Tasks : Configure Test Task

        gradle -q runAppEngine , then

    1. Laucnches the GCE local development server
    2. Runs all tests
    3. Shut the server down

 */

task runAppEngine (dependsOn: ":backend:appengineRun") {
    project(":backend").afterEvaluate { backend ->
        backend.extensions.appengine.daemon = true
        // set demon mode // https://github.com/GoogleCloudPlatform/gradle-appengine-plugin#convention-properties
        // afterEvaluate  https://docs.gradle.org/current/userguide/build_lifecycle.html
    }
    doLast {
        // https://www.udacity.com/course/viewer#!/c-ud867-nd/l-4325950937/m-4296375297
        // do Test
        println "started the server."
    }
}

runAppEngine.finalizedBy "runAllMyTest"

task runAllMyTest {
    dependsOn tasks.matching { task -> task.name.startsWith("test")} // do all tesk after launching server
}

runAllMyTest.finalizedBy ":backend:appengineStop"

/*
    Task listnener

gradle.taskGraph.beforeTask { Task task ->
    println "[Executing] $task ..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "[FAILED] $task "
    }
    else {
        println "[DONE] $task]"
    }
}

*/